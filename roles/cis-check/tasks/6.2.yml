---
### 6.2 User and Group Settings

- name: 6.2.1 Ensure password fields are not empty (Scored)
  block:
    - name: 6.2.1 Ensure password fields are not empty
      shell: "cat /etc/shadow | awk -F: '($2 == \"\" ) { print $1 \" does not have a password \"}'"
      register: v621
    - set_fact:
        results: '{{ results|combine({"6.2.1 Ensure password fields are not empty (Scored)": v621.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.2 Ensure no legacy "+" entries exist in /etc/passwd (Scored)
  block:
    - name: 6.2.2 Ensure no legacy "+" entries exist in /etc/passwd
      shell: 'grep "^\+:" /etc/passwd'
      register: v622
      ignore_errors: true
    - set_fact:
        results: '{{ results|combine({"6.2.2 Ensure no legacy "+" entries exist in /etc/passwd (Scored)": v621.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.3 Ensure no legacy "+" entries exist in /etc/shadow (Scored)
  block:
    - name: 6.2.3 Ensure no legacy "+" entries exist in /etc/shadow
      shell: 'grep "^\+:" /etc/shadow'
      register: v623
      ignore_errors: true
    - set_fact:
        results: '{{ results|combine({"6.2.3 Ensure no legacy "+" entries exist in /etc/shadow (Scored)": v623.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.4 Ensure no legacy "+" entries exist in /etc/group (Scored)
  block:
    - name: 6.2.4 Ensure no legacy "+" entries exist in /etc/group
      shell:  'grep "^\+:" /etc/group'
      register: v624
      ignore_errors: true
    - set_fact:
        results: '{{ results|combine({"6.2.4 Ensure no legacy "+" entries exist in /etc/group (Scored)": v624.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.5 Ensure root is the only UID 0 account (Scored)
  block:
    - name: 6.2.5 Ensure root is the only UID 0 account
      shell: "cat /etc/passwd | awk -F: '($3 == 0) { print $1 }'"
      register: v625
      ignore_errors: true
    - set_fact:
        results: '{{ results|combine({"6.2.5 Ensure root is the only UID 0 account (Scored)": v625.stdout is match("root")}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.6 Ensure root PATH Integrity (Scored)
  block:
    - name: 6.2.6 Ensure root PATH Integrity
      shell: "if [ \"`echo $PATH | grep ::`\" != \"\" ]; then echo \"Empty Directory in PATH (::)\"; fi; if [ \"`echo $PATH | grep :$`\" != \"\" ]; then echo \"Trailing : in PATH\"; fi; p=`echo $PATH | sed -e 's/::/:/' -e 's/:$//' -e 's/:/ /g'`; set -- $p; while [ \"$1\" != \"\" ]; do if [ \"$1\" = \".\" ]; then echo \"PATH contains .\"; shift; continue; fi; if [ -d $1 ]; then dirperm=`ls -ldH $1 | cut -f1 -d\" \"`; if [ `echo $dirperm | cut -c6` != \"-\" ]; then echo \"Group Write permission set on directory $1\"; fi; if [ `echo $dirperm | cut -c9` != \"-\" ]; then echo \"Other Write permission set on directory $1\"; fi; dirown=`ls -ldH $1 | awk '{print $3}'`; if [ \"$dirown\" != \"root\" ] ; then echo \"$1 is not owned by root\"; fi; else echo \"$1 is not a directory\"; fi; shift; done"
      register: v626
    - set_fact:
        results: '{{ results|combine({"6.2.6 Ensure root PATH Integrity (Scored)": v626.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.7 Ensure all users' home directories exist (Scored)
  block:
    - name: 6.2.7 Ensure all users' home directories exist
      shell: "cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != \"/sbin/nologin\" && $7 != \"/bin/false\") { print $1 \" \" $6 }' | while read user dir; do if [ ! -d \"$dir\" ]; then echo \"The home directory ($dir) of user $user does not exist.\"; fi; done"
      register: v627
    - set_fact:
        results: "{{ results|combine({\"6.2.7 Ensure all users' home directories exist (Scored)\": v627.stdout_lines|length==0}) }}"
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.8 Ensure users' home directories permissions are 750 or more restrictive (Scored)
  block:
    - name: 6.2.8 Ensure users' home directories permissions are 750 or more restrictive
      shell: "cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 !=\"/sbin/nologin\" && $7 != \"/bin/false\") { print $1 \" \" $6 }' | while read user dir; do if [ ! -d \"$dir\" ]; then echo \"The home directory ($dir) of user $user does not exist.\"; else dirperm=`ls -ld $dir | cut -f1 -d\" \"`; if [ `echo $dirperm | cut -c6` != \"-\" ]; then echo \"Group Write permission set on the home directory ($dir) of user $user\"; fi; if [ `echo $dirperm | cut -c8` != \"-\" ]; then echo \"Other Read permission set on the home directory ($dir) of user $user\"; fi; if [ `echo $dirperm | cut -c9` != \"-\" ]; then echo \"Other Write permission set on the home directory ($dir) of user $user\"; fi; if [ `echo $dirperm | cut -c10` != \"-\" ]; then echo \"Other Execute permission set on the home directory ($dir) of user $user\"; fi; fi; done"
      register: v628
    - set_fact:
        results: "{{ results|combine({\"6.2.8 Ensure users' home directories permissions are 750 or more restrictive (Scored)\": v628.stdout_lines|length==0}) }}"
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.9 Ensure users own their home directories (Scored)
  block:
    - name: 6.2.9 Ensure users own their home directories
      shell: "cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != \"/sbin/nologin\" && $7 != \"/bin/false\") { print $1 \" \" $6 }' | while read user dir; do if [ ! -d \"$dir\" ]; then echo \"The home directory ($dir) of user $user does not exist.\"; else owner=$(stat -L -c \"%U\" \"$dir\"); if [ \"$owner\" != \"$user\" ]; then echo \"The home directory ($dir) of user $user is owned by $owner.\"; fi; fi; done"
      register: v629
    - set_fact:
        results: '{{ results|combine({"6.2.9 Ensure users own their home directories (Scored)": v629.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.10 Ensure users' dot files are not group or world writable (Scored)
  block:
    - name: 6.2.10 Ensure users' dot files are not group or world writable
      shell: "cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != \"/sbin/nologin\" && $7 != \"/bin/false\") { print $1 \" \" $6 }' | while read user dir; do if [ ! -d \"$dir\" ]; then echo \"The home directory ($dir) of user $user does not exist.\"; else for file in $dir/.[A-Za-z0-9]*; do if [ ! -h \"$file\" -a -f \"$file\" ]; then fileperm=`ls -ld $file | cut -f1 -d\" \"`; if [ `echo $fileperm | cut -c6` != \"-\" ]; then echo \"Group Write permission set on file $file\"; fi; if [ `echo $fileperm | cut -c9` != \"-\" ]; then echo \"Other Write permission set on file $file\"; fi; fi; done; fi; done"
      register: v6210
    - set_fact:
        results: "{{ results|combine({\"6.2.10 Ensure users' dot files are not group or world writable (Scored)\": v6210.stdout_lines|length==0}) }}"
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.11 Ensure no users have .forward files (Scored)
  block:
    - name: 6.2.11 Ensure no users have .forward files
      shell: "cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != \"/sbin/nologin\" && $7 != \"/bin/false\") { print $1 \" \" $6 }' | while read user dir; do if [ ! -d \"$dir\" ]; then echo \"The home directory ($dir) of user $user does not exist.\"; else if [ ! -h \"$dir/.forward\" -a -f \"$dir/.forward\" ]; then echo \".forward file $dir/.forward exists\"; fi; fi; done"
      register: v6211
    - set_fact:
        results: '{{ results|combine({"6.2.11 Ensure no users have .forward files (Scored)": v6211.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.12 Ensure no users have .netrc files (Scored)
  block:
    - name: 6.2.12 Ensure no users have .netrc files
      shell: "cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != \"/sbin/nologin\" && $7 != \"/bin/false\") { print $1 \" \" $6 }' | while read user dir; do if [ ! -d \"$dir\" ]; then echo \"The home directory ($dir) of user $user does not exist.\"; else if [ ! -h \"$dir/.netrc\" -a -f \"$dir/.netrc\" ]; then echo \".netrc file $dir/.netrc exists\"; fi; fi; done"
      register: v6212
    - set_fact:
        results: '{{ results|combine({"6.2.12 Ensure no users have .netrc files (Scored)": v6212.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.13 Ensure users' .netrc Files are not group or world accessible (Scored)
  block:
    - name: 6.2.13 Ensure users' .netrc Files are not group or world accessible
      shell: "cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != \"/sbin/nologin\" && $7 != \"/bin/false\") { print $1 \" \" $6 }' | while read user dir; do if [ ! -d \"$dir\" ]; then echo \"The home directory ($dir) of user $user does not exist.\"; else for file in $dir/.netrc; do if [ ! -h \"$file\" -a -f \"$file\" ]; then fileperm=`ls -ld $file | cut -f1 -d\" \"`; if [ `echo $fileperm | cut -c5` != \"-\" ]; then echo \"Group Read set on $file\"; fi; if [ `echo $fileperm | cut -c6` != \"-\" ]; then echo \"Group Write set on $file\"; fi; if [ `echo $fileperm | cut -c7` != \"-\" ]; then echo \"Group Execute set on $file\"; fi; if [ `echo $fileperm | cut -c8` != \"-\" ]; then echo \"Other Read set on $file\"; fi; if [ `echo $fileperm | cut -c9` != \"-\" ]; then echo \"Other Write set on $file\"; fi; if [ `echo $fileperm | cut -c10` != \"-\" ]; then echo \"Other Execute set on $file\"; fi; fi; done; fi; done"
      register: v6213
    - set_fact:
        results: "{{ results|combine({\"6.2.13 Ensure users' .netrc Files are not group or world accessible (Scored)\": v6213.stdout_lines|length==0}) }}"
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.14 Ensure no users have .rhosts files (Scored)
  block:
    - name: 6.2.14 Ensure no users have .rhosts files
      shell: "cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != \"/sbin/nologin\" && $7 != \"/bin/false\") { print $1 \" \" $6 }' | while read user dir; do if [ ! -d \"$dir\" ]; then echo \"The home directory ($dir) of user $user does not exist.\"; else for file in $dir/.rhosts; do if [ ! -h \"$file\" -a -f \"$file\" ]; then echo \".rhosts file in $dir\"; fi; done; fi; done"
      register: v6214
    - set_fact:
        results: '{{ results|combine({"6.2.14 Ensure no users have .rhosts files (Scored)": v6214.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.15 Ensure all groups in /etc/passwd exist in /etc/group (Scored)
  block:
    - name: 6.2.15 Ensure all groups in /etc/passwd exist in /etc/group
      shell: "for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do grep -q -P \"^.*?:[^:]*:$i:\" /etc/group; if [ $? -ne 0 ]; then echo \"Group $i is referenced by /etc/passwd but does not exist in /etc/group\"; fi; done"
      register: v6215
    - set_fact:
        results: '{{ results|combine({"6.2.15 Ensure all groups in /etc/passwd exist in /etc/group (Scored)": v6215.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.16 Ensure no duplicate UIDs exist (Scored)
  block:
    - name: 6.2.16 Ensure no duplicate UIDs exist
      shell: "cat /etc/passwd | cut -f3 -d\":\" | sort -n | uniq -c | while read x ; do [ -z \"${x}\" ] && break; set - $x; if [ $1 -gt 1 ]; then users=`awk -F: '($3 == n) { print $1 }' n=$2 /etc/passwd | xargs`; echo \"Duplicate UID ($2): ${users}\"; fi; done"
      register: v6216
    - set_fact:
        results: '{{ results|combine({"6.2.16 Ensure no duplicate UIDs exist (Scored)": v6216.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.17 Ensure no duplicate GIDs exist (Scored)
  block:
    - name: 6.2.17 Ensure no duplicate GIDs exist
      shell: "cat /etc/group | cut -f3 -d\":\" | sort -n | uniq -c | while read x ; do [ -z \"${x}\" ] && break; set - $x; if [ $1 -gt 1 ]; then groups=`awk -F: '($3 == n) { print $1 }' n=$2 /etc/group | xargs`; echo \"Duplicate GID ($2): ${groups}\"; fi; done"
      register: v6217
    - set_fact:
        results: '{{ results|combine({"6.2.17 Ensure no duplicate GIDs exist (Scored)": v6217.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.18 Ensure no duplicate user names exist (Scored)
  block:
    - name: 6.2.18 Ensure no duplicate user names exist
      shell: "cat /etc/passwd | cut -f1 -d\":\" | sort -n | uniq -c | while read x ; do [ -z \"${x}\" ] && break; set - $x; if [ $1 -gt 1 ]; then uids=`awk -F: '($1 == n) { print $3 }' n=$2 /etc/passwd | xargs`; echo \"Duplicate User Name ($2): ${uids}\"; fi; done"
      register: v6218
    - set_fact:
        results: '{{ results|combine({"6.2.18 Ensure no duplicate user names exist (Scored)": v6218.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation

- name: 6.2.19 Ensure no duplicate group names exist (Scored)
  block:
    - name: 6.2.19 Ensure no duplicate group names exist
      shell: "cat /etc/group | cut -f1 -d\":\" | sort -n | uniq -c | while read x ; do [ -z \"${x}\" ] && break; set - $x; if [ $1 -gt 1 ]; then gids=`gawk -F: '($1 == n) { print $3 }' n=$2 /etc/group | xargs`; echo \"Duplicate Group Name ($2): ${gids}\"; fi; done"
      register: v6219
    - set_fact:
        results: '{{ results|combine({"6.2.19 Ensure no duplicate group names exist (Scored)": v6219.stdout_lines|length==0}) }}'
  tags:
    - level1_server
    - level1_workstation